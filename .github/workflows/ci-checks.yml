name: CI Checks
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
env:
  IMAGE_NAME: "fruits-app"
  BASE_IMAGE: "registry.access.redhat.com/ubi8/openjdk-11"
  PROJECT_DIR: "fruits-app"
  TARGET_DIR: target/
  MVN_REPO_DIR: ~/.m2/repository

jobs:
  build-maven:
    runs-on: ubuntu-latest
    steps:
      # Checkout Knative service deploy action github repository
      - name: Checkout Knative service deploy action
        uses: actions/checkout@v2
        with:
          path: "kn-service-deploy"

      # Checkout example repository
      - name: Checkout example code
        id: git_checkout
        uses: actions/checkout@v2
        with:
          repository: kameshsampath/kn-service-action-example
          path: ${{ env.PROJECT_DIR }}

      # If none of these files has changed, we assume that the contents of
      # .m2/repository can be fetched from the cache.
      - name: Hash Maven files
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "MVN_HASH=${{ hashFiles('**/pom.xml', '.mvn/**/*', 'mvnw*') }}" >> $GITHUB_ENV

      # Download the m2 repository from the cache to speed up the build.
      - name: Check for Maven cache
        id: check-mvn-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.MVN_REPO_DIR }}
          key: ${{ env.MVN_HASH }}

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Maven Build
        id: build_app
        working-directory: ${{ env.PROJECT_DIR }}
        run: mvn -B -DskipTests clean package --file pom.xml

      # If there was no cache hit above, store the output into the cache now.
      - name: Save Maven repo into cache
        if: ${{ steps.check-mvn-cache.outputs.cache-hit }} != 'true'
        uses: actions/cache@v2
        with:
          path: ${{ env.MVN_REPO_DIR }}
          key: ${{ env.MVN_HASH }}

      #  Store the output jar into the env for reuse below.
      - name: Get jar filename
        id: get-jarname
        run: |
          export JAR_NAME="$(basename $(ls ${{ env.PROJECT_DIR }}/target/*.jar))"
          echo "Fruits App jar is $JAR_NAME"
          echo "::set-output name=jarname::$JAR_NAME"
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV

      # Upload the source code for future jobs to use.
      - name: Upload working directory 
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_DIR }}
          path: ${{ env.PROJECT_DIR }}
          if-no-files-found: error

  build-image:
    runs-on: ubuntu-latest
    needs: [build-maven]
    steps:
      - name: Download working directory
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_DIR }}

      - name: Get Commit Metadata
        id: commit_metadata
        run: |
          echo "##[set-output name=sha;]$(echo $(git rev-parse --short $GITHUB_SHA))"
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"

      # Build container image using Buildah Action
      - name: Build Image
        uses: redhat-actions/buildah-build@v1
        with:
          image: ${{ env.IMAGE_NAME }}
          tag: "${{steps.commit_metadata.outputs.branch}}-${{steps.commit_metadata.outputs.sha}}"
          base-image: ${{ env.BASE_IMAGE }}
          dockerfiles: |
            ./src/main/docker/Dockerfile.jvm

      # Check if image is build
      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'
