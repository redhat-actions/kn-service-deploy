name: App Build and Push
on: [ push, workflow_dispatch ]
env:
  IMAGE_REGISTRY: "quay.io"
  REGISTRY_USERNAME: "diagrawa"
  REGISTRY_PASSWORD: "${{ secrets.REGISTRY_PASSWORD }}"
  IMAGE_NAME: "getting-started-knative"
  BASE_IMAGE: "registry.access.redhat.com/ubi8/openjdk-11"
  PROJECT_DIR: "getting-started-knative"
  TARGET_DIR: target/
  MVN_REPO_DIR: ~/.m2/repository

jobs:
  checkout-and-build:
    runs-on: ubuntu-20.04
    steps:

      # Checkout project repository
      - name: Checkout example repository
        uses: actions/checkout@v2
        with:
          repository: redhat-actions/quarkus-quickstarts

      # If none of these files has changed, we assume that the contents of
      # .m2/repository can be fetched from the cache.
      - name: Hash Maven files
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "MVN_HASH=${{ hashFiles('**/pom.xml', '.mvn/**/*', 'mvnw*') }}" >> $GITHUB_ENV

      # Download the m2 repository from the cache to speed up the build.
      - name: Check for Maven cache
        id: check-mvn-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.MVN_REPO_DIR }}
          key: ${{ env.MVN_HASH }}

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Maven Build
        id: build_app
        working-directory: ${{ env.PROJECT_DIR }}
        run: mvn -B -DskipTests clean package --file pom.xml

      # If there was no cache hit above, store the output into the cache now.
      - name: Save Maven repo into cache
        if: ${{ steps.check-mvn-cache.outputs.cache-hit }} != 'true'
        uses: actions/cache@v2
        with:
          path: ${{ env.MVN_REPO_DIR }}
          key: ${{ env.MVN_HASH }}

      #  Store the output jar into the env for reuse below.
      - name: Get jar filename
        id: get-jarname
        run: |
          export JAR_NAME="$(basename $(ls ${{ env.PROJECT_DIR }}/target/*.jar))"
          echo "${{ env.PROJECT_DIR }} App jar is $JAR_NAME"
          echo "::set-output name=jarname::$JAR_NAME"
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV

      # Upload the source code for future jobs to use.
      - name: Upload working directory
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_DIR }}
          path: ./
          if-no-files-found: error

  build-and-deploy:
    runs-on: ubuntu-20.04
    needs: [checkout-and-build]
    steps:

      # Checkout Knative service deploy action github repository
      - name: Checkout Knative service deploy action
        uses: actions/checkout@v2
        with:
          path: "kn-service-deploy"

      - name: Download working directory
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_DIR }}

      - name: Get Commit Metadata
        uses: redhat-actions/common/commit-data@v1
        id: commit_metadata

      # Build container image using Buildah Action
      - name: Build Image
        uses: redhat-actions/buildah-build@v1
        with:
          image: ${{ env.IMAGE_NAME }}
          tag: "${{steps.commit_metadata.outputs.branch}}-${{steps.commit_metadata.outputs.short_sha}}"
          base-image: ${{ env.BASE_IMAGE }}
          context: ${{ env.PROJECT_DIR }}
          dockerfiles: |
            ./${{ env.PROJECT_DIR }}/src/main/docker/Dockerfile.jvm

      - name: Push To Quay
        id: push-tag-to-quay
        uses: redhat-actions/push-to-registry@v1
        with:
          image: ${{ env.IMAGE_NAME }}
          tag: "${{steps.commit_metadata.outputs.branch}}-${{steps.commit_metadata.outputs.short_sha}}"
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.REGISTRY_USERNAME }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Login into OpenShift Cluster
        id: oc_login
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: diagrawa-code

      - name: Knative Service Deploy
        id: kn_service_deploy
        uses: ./kn-service-deploy/
        with:
          service_name: ${{ env.IMAGE_NAME }}
          container_image: "${{ steps.push-tag-to-quay.outputs.registry-path }}"
          force_create: "true"

      - name: Show Kn Service URL
        run: echo ${{ steps.kn_service_deploy.outputs.service_url }}
